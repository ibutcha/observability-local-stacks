receivers:
  otlp:
    protocols:
      http: # :4318
      grpc:

processors:
  # batch metrics before sending to reduce API usage.
  batch:

exporters:
  # ==> METRICS <== #
  # See https://opentelemetry.io/docs/specs/otel/metrics/sdk_exporters/prometheus/
  # Diagram: prometheus/otel-prometheus.png
  prometheus:
    endpoint: '0.0.0.0:8889'

  # ==> TRACING <== #
  otlphttp/tracing:
    endpoint: http://tempo:4318
    tls:
      insecure: true

  # ==> TRACING <== #
  zipkin:
    endpoint: http://zipkin:9411/api/v2/spans
    format: proto

  # ==> TRACING <== #
  jaeger:
    endpoint: http://jaeger:14250
    tls:
      insecure: true

extensions:
  # responsible for responding health checks calls on behalf of collector
  health_check:
  # fetches the collector's performance data
  pprof:
  # serves as an http endpoint that provides live debugging data about instrumented components.
  zpages:

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp/tracing, zipkin]
    
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [prometheus]

    # logs:
    #   receivers: [otlp]
    #   processors: [batch]
    #   exporters: [otlp]